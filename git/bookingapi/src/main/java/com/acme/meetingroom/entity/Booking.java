package com.acme.meetingroom.entity;

import java.time.LocalDate;
import java.time.LocalTime;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;

/**
 * Entity class representing a meeting room booking. Maps to a database table
 * using JPA annotations.
 */
@Entity
@Table(name = "bookings", uniqueConstraints = {
		@UniqueConstraint(columnNames = { "room", "date", "time_from", "time_to" }) })
public class Booking {

	/**
	 * The unique identifier for the booking. Automatically generated by the
	 * database.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	/**
	 * The name or identifier of the meeting room being booked. Cannot be null.
	 */
	@Column(nullable = false)
	private String room;

	/**
	 * The email of the employee who made the booking. Cannot be null.
	 */
	@NotNull(message = "Employee email is required.")
	@Column(name = "employee_email", nullable = false)
	private String employeeEmail;

	/**
	 * The date of the booking. Cannot be null.
	 */
	@NotNull(message = "Date is required.")
	@Column(nullable = false)
	private LocalDate date;

	/**
	 * The start time of the booking (inclusive). Cannot be null.
	 */
	@NotNull(message = "Time from is required.")
	@Column(name = "time_from", nullable = false)
	private LocalTime timeFrom;

	/**
	 * The end time of the booking (exclusive). Cannot be null.
	 */
	@NotNull(message = "Time to is required.")
	@Column(name = "time_to", nullable = false)
	private LocalTime timeTo;

	/**
	 * Default constructor required by JPA.
	 */
	public Booking() {
		// Default constructor for JPA
	}

	/**
	 * Constructs a new Booking with the specified details.
	 *
	 * @param room          the name or identifier of the meeting room.
	 * @param employeeEmail the email of the employee creating the booking.
	 * @param date          the date of the booking.
	 * @param timeFrom      the start time of the booking (inclusive).
	 * @param timeTo        the end time of the booking (exclusive).
	 */
	public Booking(String room, String employeeEmail, LocalDate date, LocalTime timeFrom, LocalTime timeTo) {
		this.room = room;
		this.employeeEmail = employeeEmail;
		this.date = date;
		this.timeFrom = timeFrom;
		this.timeTo = timeTo;
	}

	// Getters and setters with comments

	/**
	 * Gets the unique identifier of the booking.
	 *
	 * @return the booking ID.
	 */
	public Long getId() {
		return id;
	}

	/**
	 * Sets the unique identifier of the booking.
	 *
	 * @param id the booking ID.
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the name or identifier of the meeting room.
	 *
	 * @return the room name or ID.
	 */
	public String getRoom() {
		return room;
	}

	/**
	 * Sets the name or identifier of the meeting room.
	 *
	 * @param room the room name or ID.
	 */
	public void setRoom(String room) {
		this.room = room;
	}

	/**
	 * Gets the email of the employee who made the booking.
	 *
	 * @return the employee's email.
	 */
	public String getEmployeeEmail() {
		return employeeEmail;
	}

	/**
	 * Sets the email of the employee who made the booking.
	 *
	 * @param employeeEmail the employee's email.
	 */
	public void setEmployeeEmail(String employeeEmail) {
		this.employeeEmail = employeeEmail;
	}

	/**
	 * Gets the date of the booking.
	 *
	 * @return the booking date.
	 */
	public LocalDate getDate() {
		return date;
	}

	/**
	 * Sets the date of the booking.
	 *
	 * @param date the booking date.
	 */
	public void setDate(LocalDate date) {
		this.date = date;
	}

	/**
	 * Gets the start time of the booking (inclusive).
	 *
	 * @return the start time.
	 */
	public LocalTime getTimeFrom() {
		return timeFrom;
	}

	/**
	 * Sets the start time of the booking (inclusive).
	 *
	 * @param timeFrom the start time.
	 */
	public void setTimeFrom(LocalTime timeFrom) {
		this.timeFrom = timeFrom;
	}

	/**
	 * Gets the end time of the booking (exclusive).
	 *
	 * @return the end time.
	 */
	public LocalTime getTimeTo() {
		return timeTo;
	}

	/**
	 * Sets the end time of the booking (exclusive).
	 *
	 * @param timeTo the end time.
	 */
	public void setTimeTo(LocalTime timeTo) {
		this.timeTo = timeTo;
	}

	/**
	 * Returns a string representation of the Booking.
	 *
	 * @return a string containing the booking details.
	 */
	@Override
	public String toString() {
		return "Booking{" + "id=" + id + ", room='" + room + '\'' + ", employeeEmail='" + employeeEmail + '\''
				+ ", date=" + date + ", timeFrom=" + timeFrom + ", timeTo=" + timeTo + '}';
	}
}
